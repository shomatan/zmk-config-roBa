#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W  &kp E         &kp R             &kp T                                       &kp Y                &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S  &lt 3 D       &kp F             &kp G  &none                   &none        &kp H                &kp J  &lt 3 K    &kp L    &kp ENTER
&mt LEFT_SHIFT Z  &kp X  &kp C         &kp V             &kp B  &none                   &none        &kp N                &kp M  &kp COMMA  &kp DOT  &kp BACKSPACE
&none             &none  &kp LEFT_ALT  &kp LEFT_COMMAND  &none  &mt TAB LEFT_SHIFT      &lt 2 SPACE  &lt 1 RIGHT_COMMAND                             &lt_to_layer_0 6 ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp NUMBER_1          &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                        &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8      &kp NUMBER_9       &kp NUMBER_0
&kp CARET             &kp AT_SIGN   &kp SLASH     &kp MINUS     &kp UNDERSCORE  &none       &none   &kp SEMICOLON     &kp COLON          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&mt LEFT_SHIFT TILDE  &kp GRAVE     &kp QUESTION  &kp EQUAL     &kp UNDERSCORE  &none       &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE    &none
&trans                &trans        &trans        &trans        &trans          &trans      &trans  &trans                                                                    &none
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans        &trans                &trans                 &trans
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans                                                                    &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &none   &none   &none   &trans                      &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp HOME        &none   &none   &none   &none   &trans      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &none   &trans  &none   &trans  &trans      &trans  &trans  &trans          &trans          &trans           &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
