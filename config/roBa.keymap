#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W  &kp E         &kp R             &kp T                                              &kp Y                &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S  &lt 3 D       &kp F             &kp G         &none                   &kp MINUS    &kp H                &kp J  &lt 3 K    &kp L    &kp ENTER
&mt LEFT_SHIFT Z  &kp X  &kp C         &kp V             &kp B         &kp LC(UP_ARROW)        &none        &kp N                &kp M  &kp COMMA  &kp DOT  &kp BACKSPACE
&kp LEFT_SHIFT    &none  &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 1 ESCAPE  &mt LEFT_SHIFT TAB      &lt 2 SPACE  &lt 1 RIGHT_COMMAND                             &lt_to_layer_0 6 ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp EQUAL                      &kp EXCLAMATION   &kp AT_SIGN        &kp HASH              &kp DOLLAR             &kp PERCENT
&kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &none       &none   &kp SEMICOLON     &kp COLON          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET
&none         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &none       &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND
&trans        &trans        &kp NUMBER_0  &trans        &trans     &trans      &trans  &trans                                                                            &none
            >;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET
&kp GRAVE        &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans        &kp LESS_THAN         &kp GREATER_THAN       &trans
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans                                                                    &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &none   &none   &none   &trans                      &trans          &trans          &none         &trans           &trans
&kp HOME        &none   &none   &none   &none   &trans      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_SHIFT  &none   &trans  &none   &trans  &trans      &trans  &trans          &trans          &trans        &trans           &trans
&trans          &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(PLUS) LG(MINUS)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MISC {
            bindings = <
&trans  &kp LC(NUMBER_7)  &trans            &trans            &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp LC(NUMBER_4)  &kp LC(NUMBER_5)  &kp LC(NUMBER_6)  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans            &trans            &trans            &trans  &trans      &trans       &trans                                                  &none
            >;
        };
    };
};
